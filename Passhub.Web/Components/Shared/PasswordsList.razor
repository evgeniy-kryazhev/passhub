@using Passhub.Domain.Passwords
@using Passhub.Web.Extensions
@using Passhub.Web.Services.Passwords
@using Passhub.Web.ViewModels
@using Blazorise
@rendermode InteractiveServer

@inject IPasswordService PasswordService
@inject IPasswordManager PasswordManager

<div class="tabs m-0">
    <ul class="m-0">
        <li class="is-active">
            <a>Passwords</a>
        </li>
    </ul>
</div>

<div class="mt-3 mx-2 is-display-flex is-gap-1 is-flex-wrap-wrap">
    <div class="buttons mb-0">
        <button class="button is-primary"
                @onclick="() => _visibleModal = true">
            <div class="icon">
                <ion-icon name="add-circle-outline"></ion-icon>
            </div>
        </button>

        <button class="button is-danger"
                disabled="@(_selectedPassword == null)"
                @onclick="DeleteAsync">
            <div class="icon">
                <ion-icon name="trash-outline"></ion-icon>
            </div>
        </button>

        <button class="button is-primary"
                disabled="@(_selectedPassword == null)"
                @onclick="GetPasswordAsync">
            <div class="icon">
                <ion-icon name="open-outline"></ion-icon>
            </div>
        </button>
    </div>

    <Field Class="is-flex-grow-1">
        <TextEdit @bind-Text="_filter" Placeholder="Name" />
    </Field>
</div>

<section class="mt-3">
    <ViewPassword @bind-Password="@_password"></ViewPassword>
</section>

<section class="is-hidden-desktop is-hidden-tablet mt-3">
    @foreach (var password in _filteredPasswords)
    {
        <div class="card mx-2 @(IsSelected(password) ? "has-background-primary" : "")">
            <div class="card-content">
                <div @onclick="() => SelectedPassword(password)">
                    <img src="@password.GetIconWebsite()"
                         alt="@password.Url"
                         width="18"
                         height="18"/>
                    <span>@password.Name</span>
                </div>
            </div>
        </div>
    }
</section>

<section class="mt-3 is-hidden-mobile">
    <table class="table is-fullwidth is-primary is-bordered is-hoverable">
        <thead>
        <tr>
            <th>#</th>
            <th>Name</th>
            <th>Login</th>
            <th>Url</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var password in _filteredPasswords)
        {
            <tr class="@(IsSelected(password) ? "is-selected" : "")"
                @onclick="() => SelectedPassword(password)">
                <th>@(_passwords.IndexOf(password) + 1)</th>
                <th>@password.Name</th>
                <th>@password.Login</th>
                <th>
                    <div>
                        <img src="@password.GetIconWebsite()"
                             alt="@password.Name"
                             width="18"
                             height="18"/>
                        <a href="@password.Url" target="_blank">@password.Url</a>
                    </div>
                </th>
            </tr>
        }
        </tbody>
    </table>
</section>

<div class="modal @(ModalClass)">
    <div class="modal-background"></div>
    <div class="modal-content box">
        <EditForm Model="_formInput"
                  method="post"
                  OnValidSubmit="AddPassword"
                  FormName="login">
            <DataAnnotationsValidator/>
            <div class="field">
                <div class="control">
                    <label class="label">Name</label>
                    <InputText @bind-Value="_formInput.Name"
                               class="input"
                               placeholder="Name">
                    </InputText>
                    <ValidationMessage For="() => _formInput.Name" class="has-text-danger"/>
                </div>
            </div>

            <div class="field">
                <div class="control">
                    <label class="label">Url</label>
                    <InputText @bind-Value="_formInput.Url"
                               class="input"
                               placeholder="Url">
                    </InputText>
                    <ValidationMessage For="() => _formInput.Url" class="has-text-danger"/>
                </div>
            </div>

            <div class="field">
                <div class="control">
                    <label class="Login">Login</label>
                    <InputText @bind-Value="_formInput.Login"
                               class="input"
                               placeholder="Login">
                    </InputText>
                    <ValidationMessage For="() => _formInput.Login" class="has-text-danger"/>
                </div>
            </div>

            <div class="field">
                <div class="control">
                    <label class="label">Password</label>
                    <InputText @bind-Value="_formInput.Password"
                               type="password"
                               class="input"
                               placeholder="Password">
                    </InputText>
                    <ValidationMessage For="() => _formInput.Password" class="has-text-danger"/>
                </div>
            </div>
            <div class="field is-display-flex is-justify-content-end">
                <div class="buttons">
                    <button type="submit"
                            class="button is-primary">
                        Add
                    </button>
                    <button class="button"
                            @onclick="CloseModal">
                        Close
                    </button>
                </div>
            </div>
        </EditForm>
    </div>
    <button class="modal-close is-large"
            aria-label="close"
            @onclick="CloseModal">
    </button>
</div>

@code {
    private List<Password> _passwords = [];
    private Password? _selectedPassword;

    private PasswordFormInput _formInput = new();
    private bool _visibleModal = false;
    private string ModalClass => _visibleModal ? "is-active" : "";

    private string _password = string.Empty;

    private string _filter = string.Empty;

    private List<Password> _filteredPasswords
    {
        get
        {
            if (string.IsNullOrEmpty(_filter))
            {
                return _passwords;
            }

            return _passwords
                .Where(x => x.Name.ToLower().Contains(_filter.ToLower()) || 
                            x.Url.ToLower().Contains(_filter.ToLower()))
                .ToList();
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        _passwords = await PasswordService.GetListAsync();
    }

    private bool IsSelected(Password password)
    {
        if (_selectedPassword == null)
        {
            return false;
        }

        return _selectedPassword.Id == password.Id;
    }

    private void SelectedPassword(Password password)
    {
        _selectedPassword = password;
    }

    private void CloseCopiedModal()
    {
        _password = string.Empty;
    }

    private void CloseModal()
    {
        _formInput = new PasswordFormInput
        {
            Name = "",
            Url = "",
            Login = "",
            Password = ""
        };
        _visibleModal = false;
    }

    private async Task AddPassword(EditContext obj)
    {
        var password = await PasswordService.CreateASync(_formInput.Name, _formInput.Login, _formInput.Url, _formInput.Password);
        _passwords.Add(password);
        _formInput = new PasswordFormInput
        {
            Name = "",
            Url = "",
            Login = "",
            Password = ""
        };
        _visibleModal = false;
    }

    private async Task DeleteAsync()
    {
        if (_selectedPassword == null)
        {
            return;
        }

        await PasswordService.DeleteAsync(_selectedPassword.Id);
        _passwords.Remove(_selectedPassword);
        _selectedPassword = null;
        _password = string.Empty;
    }

    private async Task GetPasswordAsync()
    {
        if (_selectedPassword == null)
        {
            return;
        }

        var password = await PasswordManager.DecryptAsync(_selectedPassword);
        _password = password ?? string.Empty;
    }

}